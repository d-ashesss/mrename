// Code generated by mockery v3.0.0-alpha.0. DO NOT EDIT.

package mocks

import (
	file "github.com/d-ashesss/mrename/file"
	mock "github.com/stretchr/testify/mock"
)

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

// Convert provides a mock function with given fields: _a0
func (_m *Converter) Convert(_a0 file.Info) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(file.Info) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(file.Info) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetNext provides a mock function with given fields: _a0
func (_m *Converter) SetNext(_a0 file.Converter) {
	_m.Called(_a0)
}

type mockConstructorTestingTNewConverter interface {
	mock.TestingT
	Cleanup(func())
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConverter(t mockConstructorTestingTNewConverter) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
